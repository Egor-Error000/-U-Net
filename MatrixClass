import math
import matplotlib.pyplot as plt
import sys

class Matrix:
    H = None
    L = None
    mas = []

    def __init__(self, H=3, L=3, mas=None):
        if mas is not None:
            self.Fool_set_data(H, L, mas)
        else:
            self.set_data(H, L)
        

    def Fool_set_data(self, H, L, mas):
        self.H = H
        self.L = L
        self.mas = mas

    def convert_data(self, Funk):
        H = len(self.mas)
        for i in range(H):
            L = len(self.mas[i])
            for j in range(L):
                self.mas[i][j] = round(Funk(self.mas[i][j]), 4)

    def set_data(self, H, L):
        self.H = H
        self.L = L
        self.mas = [[0] * L for _ in range(H)]
        for i in range(H):
            for j in range(L):
                self.mas[i][j] = (i + 1) * (j + 1)
      
    def set_File_data(self,file):
       try:
            with open(file, "r") as file:
                lines = file.readlines()

            H = len(lines)
            L = len(lines[0].strip().split())
            self.H = H
            self.L = L

            self.mas = [[0] * L for _ in range(H)]

            for i, line in enumerate(lines):
                values = line.strip().split()
                if len(values) != L:
                    raise ValueError("Прозьба ввести две колонки через пробел .Вы же сделали что-то не так.")
                for j, value in enumerate(values):
                   try:
                       self.mas[i][j] = float(value)
                   except ValueError:
                        raise ValueError(f"Не удается преобразовать значение '{value}' в число.")
       except Exception as e:
            print(f"Ошибка при считывании файла: {e}")
            raise ValueError (f"Ошибка при считывании: {e}")
            

    def set_X(self,N,x0,dx):
        self.mas=[]
        for i in range(N):
            self.mas.append(x0+i*dx)
        return self.mas
    
    def set_Y(self,Funk):
        return_mas=[]
        for i in range(len(self.mas)):
            return_mas.append(Funk(self.mas[i]))
        return return_mas
    
    def out(self,file_obgect=sys.stdout):
        if file_obgect==sys.stdout:
           self.get_data()
        else: 
           self.get_data(file_obgect)

    def mas_coordinat(self,mas_x,mas_y):
        self.mas=[mas_x,mas_y]
        self.transpose()
        
    def transpose(self):
       H = len(self.mas)
       L = len(self.mas[0])
    
       tims = [[0] * H for _ in range(L)]
    
       for i in range(H):
          for j in range(L):
             tims[j][i] = self.mas[i][j]
    
       
       self.mas = tims
     
  
    def plot(self, ax=None, **kwargs):
        if ax is None:
            fig, ax = plt.subplots()
        self.transpose()
        ax.plot(self.mas[0], self.mas[1], **kwargs)
        
        return ax
    
    def get_data(self, File_name=None):
      self.File_name = File_name

      H = len(self.mas)
      max_len = max(len(str(round(value, 4))) for row in self.mas for value in row)

      if File_name is None:
        print('-' * (max_len * len(self.mas[0])))
        for row in self.mas:
            formatted_row = " ".join("{:^{}}".format(round(value, 4), max_len) for value in row)
            print(formatted_row)
        print('-' * (max_len * len(self.mas[0])))
      else:
        with open(File_name, "w") as file:
            for row in self.mas:
                formatted_row = " ".join("{:^{}}".format(round(value, 4), max_len) for value in row)
                file.write(formatted_row + '\n')








